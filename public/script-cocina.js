// script-cocina.js - VERSI√ìN ESTABLE SIN CICLOS DE ERROR
console.log('üöÄ script-cocina.js CARGADO - Iniciando cocina...');

class CocinaDisplay {
    constructor() {
        this.ordenes = [];
        this.baseURL = window.location.origin;
        this.cargando = false;
        
        console.log('üë®‚Äçüç≥ Cocina conectada a:', this.baseURL);
        
        this.inicializar();
        this.cargarOrdenes();
        // Actualizar cada 5 segundos (no muy r√°pido)
        setInterval(() => this.cargarOrdenes(), 5000);
    }

    inicializar() {
        console.log('üë®‚Äçüç≥ Pantalla de COCINA iniciada correctamente');
        document.getElementById('ordenes-pendientes').textContent = 'Conectando...';
    }

    async cargarOrdenes() {
        // Evitar m√∫ltiples llamadas simult√°neas
        if (this.cargando) {
            console.log('‚è≥ Ya est√° cargando, esperando...');
            return;
        }
        
        this.cargando = true;
        
        try {
            console.log('üîÑ Cargando √≥rdenes...');
            const response = await fetch(this.baseURL + '/ordenes');
            
            if (!response.ok) {
                throw new Error(`Error HTTP: ${response.status}`);
            }
            
            const data = await response.json();
            console.log('‚úÖ API respondi√≥ con', data.ordenes?.length, '√≥rdenes');
            
            if (data.success && Array.isArray(data.ordenes)) {
                this.ordenes = data.ordenes;
                this.mostrarOrdenes();
                this.actualizarEstadisticas();
            } else {
                console.warn('‚ö†Ô∏è Formato de datos inesperado:', data);
            }
            
        } catch (error) {
            console.error('‚ùå Error cargando √≥rdenes:', error.message);
            // NO mostrar error en pantalla para evitar ciclos
            this.mostrarMensajeTemporal('‚è≥ Reconectando...');
        } finally {
            this.cargando = false;
        }
    }

    mostrarOrdenes() {
        const contenedor = document.getElementById('ordenes-cocina');
        const noOrders = document.getElementById('no-orders');
        
        console.log('üìä Procesando', this.ordenes.length, '√≥rdenes totales');

        // Filtrar √≥rdenes con alimentos - M√âTODO MEJORADO
        const ordenesConAlimentos = this.ordenes.filter(orden => {
            if (!orden.items_descripcion) return false;
            
            const items = orden.items_descripcion.toLowerCase();
            const tieneAlimentos = items.includes('croissant') || 
                                  items.includes('galleta') || 
                                  items.includes('s√°ndwich') || 
                                  items.includes('sandwich') ||
                                  items.includes('bagel') || 
                                  items.includes('ensalada');
            
            return tieneAlimentos;
        });

        console.log('üçΩÔ∏è Encontradas', ordenesConAlimentos.length, '√≥rdenes con alimentos');

        if (ordenesConAlimentos.length === 0) {
            // MOSTRAR MENSAJE INFORMATIVO, NO ERROR
            contenedor.innerHTML = `
                <div class="no-orders-message">
                    <h3>‚úÖ Estado: Sin √≥rdenes para cocina</h3>
                    <p>‚Ä¢ Las √≥rdenes actuales son de bebidas (barra)</p>
                    <p>‚Ä¢ Los alimentos aparecer√°n aqu√≠ autom√°ticamente</p>
                    <p>‚Ä¢ √öltima actualizaci√≥n: ${new Date().toLocaleTimeString()}</p>
                </div>
            `;
            contenedor.classList.remove('hidden');
            noOrders.classList.add('hidden');
            return;
        }

        contenedor.classList.remove('hidden');
        noOrders.classList.add('hidden');

        contenedor.innerHTML = ordenesConAlimentos.map(orden => {
            // Extraer solo alimentos
            const todosItems = orden.items_descripcion.split(',');
            const alimentos = todosItems.filter(item => {
                const itemLower = item.toLowerCase().trim();
                return itemLower.includes('croissant') || 
                       itemLower.includes('galleta') || 
                       itemLower.includes('s√°ndwich') ||
                       itemLower.includes('sandwich') ||
                       itemLower.includes('bagel') || 
                       itemLower.includes('ensalada');
            });

            return `
                <div class="kitchen-order">
                    <div class="order-header">
                        <div>
                            <div class="mesa-number">MESA ${orden.mesa}</div>
                            <div class="order-id">#${orden.id}</div>
                        </div>
                        <div class="order-time">${new Date(orden.creado_en).toLocaleTimeString()}</div>
                    </div>
                    
                    <div class="order-info">
                        <div class="total">Total: $${orden.total}</div>
                        <div class="estado">${orden.estado}</div>
                    </div>
                    
                    <div class="food-items">
                        <h4>üçΩÔ∏è Alimentos:</h4>
                        ${alimentos.map(item => `
                            <div class="food-item">
                                <span class="item-name">${item.trim()}</span>
                            </div>
                        `).join('')}
                    </div>

                    <div class="all-items">
                        <details>
                            <summary>üìã Orden completa</summary>
                            ${todosItems.map(item => `
                                <div class="item-completo ${alimentos.includes(item) ? 'es-alimento' : 'es-bebida'}">
                                    ${item.trim()}
                                </div>
                            `).join('')}
                        </details>
                    </div>
                    
                    <div class="order-actions">
                        <button class="btn btn-preparando" onclick="cocina.marcarPreparando(${orden.id})">
                            üë®‚Äçüç≥ Preparando
                        </button>
                        <button class="btn btn-listoo" onclick="cocina.marcarListo(${orden.id})">
                            ‚úÖ Listo
                        </button>
                    </div>
                </div>
            `;
        }).join('');
    }

    actualizarEstadisticas() {
        const ordenesConAlimentos = this.ordenes.filter(orden => 
            orden.items_descripcion && (
                orden.items_descripcion.toLowerCase().includes('croissant') ||
                orden.items_descripcion.toLowerCase().includes('galleta') ||
                orden.items_descripcion.toLowerCase().includes('s√°ndwich') ||
                orden.items_descripcion.toLowerCase().includes('sandwich')
            )
        );
        
        const texto = ordenesConAlimentos.length > 0 
            ? `${ordenesConAlimentos.length} √≥rdenes de alimentos`
            : 'Esperando √≥rdenes con alimentos';
            
        document.getElementById('ordenes-pendientes').textContent = texto;
    }

    marcarPreparando(ordenId) {
        console.log(`üë®‚Äçüç≥ Preparando orden #${ordenId}`);
        alert(`¬°Comenzando a preparar orden #${ordenId}!`);
    }

    marcarListo(ordenId) {
        console.log(`‚úÖ Orden #${ordenId} lista`);
        alert(`¬°Orden #${ordenId} LISTA para servir!`);
    }

    mostrarMensajeTemporal(mensaje) {
        // Mensaje temporal que no interfiere con el ciclo
        console.log('üí¨', mensaje);
    }
}

// Inicializaci√≥n segura
console.log('üìù Registrando cocina...');
document.addEventListener('DOMContentLoaded', function() {
    console.log('üéâ DOM cargado - Iniciando cocina...');
    window.cocina = new CocinaDisplay();
});